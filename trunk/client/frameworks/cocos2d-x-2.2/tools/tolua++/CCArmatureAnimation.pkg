class  CCArmatureAnimation : public CCProcessBase
{
    static CCArmatureAnimation *create(CCArmature *armature);
    CCArmatureAnimation();
    virtual ~CCArmatureAnimation(void);
    virtual bool init(CCArmature *armature);
    virtual void setSpeedScale(float speedScale);
    virtual float getSpeedScale() const;
    void play(const char *animationName, int durationTo = -1, int durationTween = -1,  int loop = -1, int tweenEasing = TWEEN_EASING_MAX);
    void playByIndex(int animationIndex,  int durationTo = -1, int durationTween = -1,  int loop = -1, int tweenEasing = TWEEN_EASING_MAX);
    virtual void pause();
    virtual void resume();
    virtual void stop();
    int getMovementCount();
    void update(float dt);
    std::string getCurrentMovementID();
    void registerMovementEventScriptHandler(LUA_FUNCTION handler);
    void unregisterMovementEventScriptHandler();
    int getMovementEventScriptHandler();
                
    void registerFrameEventScriptHandler(LUA_FUNCTION handler);
    void unregisterFrameEventScriptHandler();
    int getFrameEventScriptHandler();

    virtual CCAnimationData* getAnimationData();
    virtual void setAnimationData(CCAnimationData* var);
    
};
